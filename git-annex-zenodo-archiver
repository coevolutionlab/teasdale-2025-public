#!/usr/bin/env python3
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.


from tqdm import tqdm
from tqdm.utils import CallbackIOWrapper


import json
import os
import sys
from sys import stderr
import subprocess
import traceback
import requests
from urllib.parse import urljoin
import argparse
import yaml
from datetime import date


def isostr(str_or_dt):
    """ISO8601-ise a date if it's not already a string"""
    if isinstance(str_or_dt, str):
        return str_or_dt
    return str_or_dt.isoformat()


class ZenodoUploader:
    def __init__(self, sandbox=False):
        self.token = os.environ.get('ZENODO_API_TOKEN')
        if not self.token:
            raise RuntimeError("ZENODO_API_TOKEN environment variable required")
            
        self.base_url = 'https://sandbox.zenodo.org/api/' if sandbox else 'https://zenodo.org/api/'
        self.deposition_id = None
        self.config_file = '.zenodo.yml'
        self.config = self.load_config()
        
    def get_all_keys(self):
        """Get all git-annex keys in the repository"""
        try:
            result = subprocess.run(['git', 'annex', 'findkeys'], 
                                  capture_output=True, text=True, check=True)
            
            return set(result.stdout.rstrip().split('\n'))
        except subprocess.CalledProcessError as e:
            print(f"Error getting git-annex keys: {e}", file=sys.stderr)
            return set()
            
    def get_key_file_path(self, key):
        """Get the file path for a git-annex key"""
        try:
            result = subprocess.run(['git', 'annex', 'contentlocation', key], 
                                  capture_output=True, text=True, check=True)
            return result.stdout.strip()
        except subprocess.CalledProcessError:
            return None
    
    def load_config(self):
        """Load configuration from YAML"""
        if not os.path.exists(self.config_file):
            return None
        
        with open(self.config_file, 'r') as f:
            return yaml.safe_load(f)
    
    def save_config(self, config):
        """Save configuration to YAML"""
        with open(self.config_file, 'w') as f:
            yaml.dump(config, f, default_flow_style=False, sort_keys=False)
    
    def create_template_config(self):
        """Create a template YAML file"""
        template = {
            'title': f'Git Annex Repository Files - {os.path.basename(os.getcwd())}',
            'description': 'Files stored via git-annex - please edit this description',
            'upload_type': 'dataset',
            'publication_date': date.today().isoformat(),
            'creators': [
                {
                    'name': 'Your Name',
                    'affiliation': '',
                    'orcid': '',
                }
            ],
            'keywords': ['git-annex', 'data'],
            'license': 'cc-by-4.0',
            'communities': [],
            'notes': 'Generated by git-annex',
            'zenodo': {
                'deposition_id': None,
                'last_version': None
            }
        }
        
        self.save_config(template)
        return template
    
    def get_existing_deposition(self):
        """Get existing deposition if it exists"""
        if not self.config or not self.config.get('zenodo', {}).get('deposition_id'):
            return None
            
        deposition_id = self.config['zenodo']['deposition_id']
        try:
            response = self._api_request('GET', f'deposit/depositions/{deposition_id}')
            return response
        except requests.exceptions.HTTPError as e:
            if e.response.status_code == 404:
                print(f"Deposition {deposition_id} not found, will create new one")
                return None
            raise
    
    def create_new_version(self, deposition_id):
        """Create a new version of an existing deposition"""
        response = self._api_request('POST', f'deposit/depositions/{deposition_id}/actions/newversion')
        
        # Get the new version's deposition ID
        new_version_url = response['links']['latest_draft']
        new_deposition_id = new_version_url.split('/')[-1]
        
        print(f"Created new version: {new_deposition_id}")
        return new_deposition_id
            
    @property
    def depo_metadata(self):
        metadata = {
            'title': self.config['title'],
            'upload_type': self.config['upload_type'],
            'description': self.config['description'],
            'creators': self.config['creators'],
            'publication_date': date.today().isoformat(),
        }
        
        # Add optional fields if present
        if 'keywords' in self.config:
            metadata['keywords'] = self.config['keywords']
        if 'license' in self.config:
            metadata['license'] = self.config['license']
        if 'communities' in self.config:
            metadata['communities'] = self.config['communities']
        if 'notes' in self.config:
            metadata['notes'] = self.config['notes']
        return metadata

    def create_deposition(self):
        """Create a new Zenodo deposition or new version of existing one"""
        if not self.config:
            raise RuntimeError("No configuration loaded")
        
        # Check if we have an existing deposition
        existing = self.get_existing_deposition()
        
        if existing:
            # Create new version
            old_deposition_id = existing['id']
            self.deposition_id = self.create_new_version(old_deposition_id)
        else:
            # Create new deposition
            
            data = {'metadata': self.depo_metadata}
            
            response = self._api_request('POST', 'deposit/depositions', json=data)
            self.deposition_id = response['id']
            print(f"Created new deposition: {self.deposition_id}")
        
        return self.deposition_id
        
    def upload_file(self, key, file_path):
        """Upload a file to the deposition"""
        if not self.deposition_id:
            raise RuntimeError("No active deposition")
            
        response = self._api_request('GET', f'deposit/depositions/{self.deposition_id}')
        bucket_url = response['links']['bucket']
        
        upload_url = f"{bucket_url}/{key}"
        
        file_size = os.path.getsize(file_path)

        with open(file_path, 'rb') as f:
            with tqdm(desc=f"Uploading {key}...", total=file_size, unit="B", unit_scale=True, unit_divisor=1000) as t:
                reader_wrapper = CallbackIOWrapper(t.update, f, "read")
                response = requests.put(
                    upload_url,
                    data=reader_wrapper,
                    headers={'Authorization': f'Bearer {self.token}'}
                )
                response.raise_for_status()
            
        return response.json()
        
    def publish_deposition(self):
        """Publish the deposition and get DOI"""
        if not self.deposition_id:
            raise RuntimeError("No active deposition")
            
        data = {'metadata': self.depo_metadata}
        response = self._api_request('PUT', f'deposit/depositions/{self.deposition_id}', json=data)

        response = self._api_request('POST', f'deposit/depositions/{self.deposition_id}/actions/publish')
            
        doi = response.get('doi')
        record_url = response.get('links', {}).get('record_html')
        version = response.get('metadata', {}).get('version')
        
        print(f"Published deposition with DOI: {doi}")
        print(f"Record URL: {record_url}")
        print(f"Version: {version}")
        
        return response, version, doi, record_url
        
    def get_deposition_files(self):
        """Get the list of files in the current deposition (draft or published)"""
        if not self.deposition_id:
            raise RuntimeError("No active deposition")
            
        # Get files from the deposition (works for both draft and published)
        response = self._api_request('GET', f'deposit/depositions/{self.deposition_id}/files')
        return response
    
    def get_published_files(self):
        """Get the list of published files with their download URLs"""
        if not self.deposition_id:
            raise RuntimeError("No active deposition")
            
        # Use the record ID (same as deposition ID for published records)
        files_response = self._api_request('GET', f'records/{self.deposition_id}/files')
        return files_response.get('entries', [])
        
    def register_urls_with_git_annex(self, file_entries):
        """Register download URLs with git-annex"""
        for file_entry in file_entries:
            key = file_entry['key']  # This is the filename we used (the git-annex key)
            download_url = file_entry['links']['content']
            
            try:
                subprocess.run(['git', 'annex', 'registerurl', key, download_url], 
                             check=True)
                print(f"Registered URL for key {key}")
            except subprocess.CalledProcessError as e:
                print(f"Failed to register URL for key {key}: {e}", file=sys.stderr)
                
    def _api_request(self, method, endpoint, **kwargs):
        """Make an API request to Zenodo"""
        debug = False
        url = urljoin(self.base_url, endpoint)
        headers = kwargs.pop('headers', {})
        headers['Authorization'] = f'Bearer {self.token}'
        if debug:
            print(f"{method} {url}\n", file=stderr)
        if debug and 'json' in kwargs:
            from pprint import pprint
            pprint(kwargs["json"], stream=stderr)
        response = requests.request(method, url, headers=headers, **kwargs)
        if response.status_code > 399:
            print(f"ERROR in API call: {url}", file=stderr)
            print(response.text, file=stderr)
        response.raise_for_status()
        
        return response.json()


def main():
    parser = argparse.ArgumentParser(description='Upload git-annex files to Zenodo')
    parser.add_argument('--sandbox', action='store_true', 
                       help='Use Zenodo sandbox instead of production')
    args = parser.parse_args()
    
    try:
        uploader = ZenodoUploader(sandbox=args.sandbox)
        
        # Check if config exists, create template if not
        if not uploader.config:
            print("No .zenodo.yml configuration file found.")
            print("Creating template configuration file...")
            uploader.create_template_config()
            print("Please edit .zenodo.yml with your metadata and run the script again.")
            return
        
        # Validate required fields
        required_fields = ['title', 'description', 'upload_type', 'creators', 'publication_date']
        for field in required_fields:
            if not uploader.config.get(field):
                print(f"Error: Required field '{field}' missing or empty in .zenodo.yml")
                return
        
        # Get all git-annex keys
        print("Getting git-annex keys...")
        keys = uploader.get_all_keys()
        print(f"Found {len(keys)} keys")
        
        if not keys:
            print("No keys found, nothing to upload")
            return
        
        # Check if we have an existing deposition to compare against
        existing_deposition = uploader.get_existing_deposition()
        existing_keys = set()
        
        if existing_deposition:
            # Get existing files from the deposition
            print("Checking existing files in deposition...")
            try:
                existing_files = uploader._api_request('GET', f'deposit/depositions/{existing_deposition["id"]}/files')
                existing_keys = {f['filename'] for f in existing_files}
                print(f"Found {len(existing_keys)} files already uploaded")
            except Exception as e:
                print(f"Warning: Could not check existing files: {e}")
        
        # Filter out keys that are already uploaded
        keys_to_upload = [key for key in keys if key not in existing_keys]
        
        print(f"Will upload {len(keys_to_upload)} new files")
        
        if not keys_to_upload:
            print("No new files to upload, exiting...")
            return
            
        # Create deposition (new or new version)
        uploader.create_deposition()
        
        # Upload new files only
        uploaded_keys = []
        for key in keys_to_upload:
            file_path = uploader.get_key_file_path(key)
            if file_path and os.path.exists(file_path):
                try:
                    uploader.upload_file(key, file_path)
                    uploaded_keys.append(key)
                except Exception as e:
                    print(f"Failed to upload {key}: {e}", file=sys.stderr)
                    traceback.print_exc()
            else:
                print(f"File not found for key {key}", file=sys.stderr)
                
        if not uploaded_keys and not existing_keys:
            print("No files were uploaded successfully")
            return
            
        # Publish deposition
        print("Publishing deposition...")
        response, version, doi, record_url = uploader.publish_deposition()
        
        # Update config with deposition ID and version info only after successful publication
        if 'zenodo' not in uploader.config:
            uploader.config['zenodo'] = {}
        uploader.config['zenodo']['deposition_id'] = uploader.deposition_id
        uploader.config['zenodo']['last_version'] = version
        uploader.config['zenodo']['doi'] = doi
        uploader.config['zenodo']['record_url'] = record_url
        uploader.save_config(uploader.config)
        
        # Get published file URLs
        print("Getting published file URLs...")
        file_entries = uploader.get_published_files()
        
        # Register URLs with git-annex
        print("Registering URLs with git-annex...")
        uploader.register_urls_with_git_annex(file_entries)
        
        print("Upload complete!")
        
    except Exception as e:
        print(f"Error: {e}", file=sys.stderr)
        traceback.print_exc()
        sys.exit(1)


if __name__ == '__main__':
    main()
